// Exercise 13.02.01
// This program prompts for any number of fraction values, adds them
//  together, and prints the sum.

#include <iostream>
using namespace std;

class Fraction {
private:
    int num, den;      // Numerator and denominator.
public:
    Fraction() {set(0, 1);}
    Fraction(int n, int d) {set(n, d);}
    Fraction(const Fraction &src);

    void set(int n, int d) {num = n; den = d; normalize();}
    int get_num() const {return num;}
    int get_den() const {return den;}
    Fraction add(const Fraction &other);
    Fraction mult(const Fraction &other);
    Fraction operator+(const Fraction &other)
        {return add(other);}
    Fraction operator*(const Fraction &other)
        {return mult(other);}

private:
    void normalize();   // Put fraction into standard form.
    int gcf(int a, int b);     // Greatest Common Factor.
    int lcm(int a, int b);     // Lowest Common Denominator.
};

int main() {
    Fraction fraction_sum(0, 0);
    Fraction fraction_new;
    int numerator, denominator;

    while (1) {                                   // MAIN LOOP
        cout << "Enter numerator (0 to exit): ";
        cin >> numerator;
        if (numerator == 0)                       // BREAK ON ZERO
            break;
        cout << "Enter denominator: ";
        cin >> denominator;
        fraction_new.set(numerator, denominator); 
        fraction_sum = fraction_sum + fraction_new;
    }
    cout << "The sum of the fractions is: ";
    cout << fraction_sum.get_num() << "/";
    cout << fraction_sum.get_den() << "." << endl;

    system("PAUSE"); 
    return 0;
}

// ---------------------------------------------------
// FRACTION CLASS FUNCTIONS

Fraction::Fraction(Fraction const &src) {
     num = src.num;
     den = src.den;
}

// Normalize: put fraction into a standard form, unique
//  for each mathematically different value.
//
void Fraction::normalize(){

    // Handle cases involving 0

    if (den == 0 || num == 0) {
        num = 0;
        den = 1;
    }

    // Put neg. sign in numerator only.

    if (den < 0) {
        num *= -1;
        den *= -1;
    }

    // Factor out GCF from numerator and denominator.

    int n = gcf(num, den);
    num = num / n;
    den = den / n;
}

// Greatest Common Factor
//
int Fraction::gcf(int a, int b) {
    if (a % b == 0)
        return abs(b);
    else
        return gcf(b, a % b);
}

// Lowest Common Multiple
//
int Fraction::lcm(int a, int b){
    return (a / gcf(a, b)) * b;
}

Fraction Fraction::add(const Fraction &other) {
    Fraction fract;
    int lcd = lcm(den, other.den);
    int quot1 = lcd/den;
    int quot2 = lcd/other.den;
    fract.set(num * quot1 + other.num * quot2, lcd);
    fract.normalize();
    return fract;
}

Fraction Fraction::mult(const Fraction &other) {
    Fraction fract;
    fract.set(num * other.num, den * other.den);
    fract.normalize();
    return fract;
}
