// Exercise 14.03.01
// This example revises string2.cpp so that it supports operator+
//  as a series of global friend function.

#include <iostream>
#include <string.h>
using namespace std;

class String {
private:
    char *ptr;
public:
    String();
    String(char *s);
    String(const String &src);
    ~String();

    String& operator=(const String &src)
        {cpy(src.ptr); return *this;}

    String& operator=(char *s)
        {cpy(s); return *this;}

    // NEW DECLARATIONS -- FRIEND FUNCTIONS

    friend String operator+(String str1, String str2);
    friend String operator+(char *s, String str);
    friend String operator+(String str, char *s);
    
    int operator==(const String &other);
    operator char*() {return ptr;}

    void cat(char *s);
    void cpy(char *s);
};

int main() {
    String a, b, c;
    a = "I ";
    b = "am ";
    c = "so ";

    // THIS NEXT STATEMENT TESTS THE FRIEND FUNCTIONS

    String d = "Let me say that " + a + b + c + "very happy!\n";
    cout << d;
    system("PAUSE");
    return 0;
}

// ----------------------------------
// STRING CLASS FUNCTIONS

String::String() {
    ptr = new char[1];
    ptr[0] = '\0';
}

String::String(char *s) {
    int n = strlen(s);
    ptr = new char[n + 1];
    strcpy(ptr, s);
}

String::String(const String &src) {
    int n = strlen(src.ptr);
    ptr = new char[n + 1];
    strcpy(ptr, src.ptr);
}

String::~String() {
    delete [] ptr;
}

int String:: operator==(const String &other) {
    return (strcmp(ptr, other.ptr) == 0);
}


// cpy -- Copy string function
//
void String::cpy(char *s) {
    delete [] ptr;
    int n = strlen(s);
    ptr = new char[n + 1];
    strcpy(ptr, s);
}

// cat -- Concatenate string function
//
void String::cat(char *s) {

    // Allocate sufficient room for new string data.

    int n = strlen(ptr) + strlen(s);
    char *p1 = new char[n + 1];

    // Copy data to this new memory block.

    strcpy(p1, ptr);
    strcat(p1, s);

    // Release old memory block and update ptr.

    delete [] ptr;
    ptr = p1;
}


// GLOBAL FRIEND FUNCTIONS IMPLEMENTING THE + OPERATOR
// THESE MUST SUPPORT EVERY COMBINATION ALLOWED OF
// char* AND string TYPE.

String operator+(String str1, String str2) {
    String new_str(str1);
    new_str.cat(str2);
    return new_str;
}

String operator+(String str, char *s) {
    String new_str(str);
    new_str.cat(s);
    return new_str;
}

String operator+(char *s, String str) {
    String new_str(s);
    new_str.cat(str);
    return new_str;
}
