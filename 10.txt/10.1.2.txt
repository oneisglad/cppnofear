// Exercise 10.01.02. 
// Prompt for a long long, and then produce first Fibonacci
//  number that is higher.
//

#include <iostream>
#include <string>
#include <sstream> 
#include <complex> 

using namespace std;
int long long Fibo(int n);
string output_formatted_string(long long num);
long long read_formatted_input(string s);

int main()
{
    long long n = 0;
    int i = 0;
    int is_prime = true;
    string input_str;
    string out_str;

    cout << "Enter a number (separators allowed): ";
    cin >> input_str;
    n = read_formatted_input(input_str);
    i = 2;
    while (i <= sqrt(n))
    {
        // While i is <= sqrt(n),
        if (n % i == 0) // If i divides n,
            is_prime = false; // n is not prime.
        i++; // Add 1 to i.
    }

    if (is_prime)
        cout << "Number is prime." << endl;
    else
        {
            cout << "Number is not prime." << endl;
            return 0;
        }
        
    if (is_prime==true)
        for (i = 0; Fibo(i) <= n; i++)
          ;
  
    out_str = output_formatted_string(Fibo(i+1));
    cout << "Fibo(" << i << ") = " << out_str << endl;
    system("PAUSE");
    return 0;
}



long long Fibo(int n) {
     if (n < 2)
          return 1;
     long long temp1 = 1;
     long long temp2 = 1;
     long long total = 0;
     while (n-- > 1) {
         total = temp1 + temp2;
          temp2 = temp1;
          temp1 = total;
       
     }
     return total;
}

#define GROUP_SEP ','
#define GROUP_SIZE 3

long long read_formatted_input(string s) {
     for (int i = 0; i < s.size(); i++) {
     if (s[i] == GROUP_SEP)
          s.erase(i, 1);
     }
     return atoll(s.c_str());
}    

string output_formatted_string(long long num) {
     // Read data into string s.

     stringstream temp, out;
     temp << num;
     string s = temp.str();

     // Write first characters, in front of
     // first separator (GROUP_SEP).

     int n = s.size() % GROUP_SIZE;
     int i = 0;
     if (n > 0 && s.size() > GROUP_SIZE) {
          out << s.substr(i, n) << GROUP_SEP;
          i += n;
     }

     // Handle all the remaining groups.

     n = s.size() / GROUP_SIZE - 1;
     while (n-- > 0) {
          out << s.substr(i, GROUP_SIZE) << GROUP_SEP;
          i += GROUP_SIZE;
     }
     out << s.substr(i); // Write the rest of digits.
     return out.str(); // Convert stream -> string.
}
